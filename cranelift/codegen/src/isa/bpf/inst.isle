;; Instruction formats
(type MInst
  (enum
    ;; BPF_ALU (64 bits)

    ;; LD/ST
    (LdAbs
      (size Size)
      (imm Imm32))

    (LdInd
      (index Reg)
      (size Size)
      (imm Imm32))

    (LdDwImm
      (dst Reg)
      (imm Imm32))

    (LdX
      (dst Reg)
      (index Reg)
      (size Size)
      (offset Imm16))

    (StImm
      (value Imm32)
      (index Reg)
      (size Size)
      (offset Imm16))

    (StReg
      (value Reg)
      (index Reg)
      (size Size)
      (offset Imm16))

    ;; ALU Register/register
    (MovImm64
      (rd Reg)
      (imm Imm64))

    (AluRR
      (op AluOpcode)
      (rs Reg)
      (rd Reg))

    (AluRI
      (op AluOpcode)
      (rd Reg)
      (imm Imm32))

    ;; Alu 32 bit
    (AluRR32
      (op AluOpcode)
      (rs Reg)
      (rd Reg))

    (AluRI32
      (op AluOpcode)
      (rd Reg)
      (imm Imm32))

    ;; Jump
    (Jmp
      (label MachLabel))

    (JmpCondRR
      (cond JmpCond)
      (rs1 Reg)
      (rs2 Reg)
      (label MachLabel))

    (JmpCondRI
      (cond JmpCond)
      (rs Reg)
      (imm Imm32)
      (label MachLabel))

    (JmpCondRR32
      (cond JmpCond)
      (rs1 Reg)
      (rs2 Reg)
      (label MachLabel))

    (JmpCondRI32
      (cond JmpCond)
      (rs Reg)
      (imm Imm32)
      (label MachLabel))

    (Call
      (imm Imm32))

    (TailCall
      (imm Imm32))

    (Exit)

    ;; Mov with src == dst is a nop in linux kernel jitter
    (Nop)
  )
)

(type Imm16 (primitive Imm16))
(type Imm32 (primitive Imm32))

(type AluOpcode
  (enum
    (Add)
    (Sub)
    (Mul)
    (Div)
    (SDiv)
    (Or)
    (And)
    (Lsh)
    (Rsh)
    (Neg)
    (Mod)
    (SMod)
    (Xor)
    (Mov)
    (MovSx (size Size))
    (Arsh)
    (HToLe (size Size))
    (HToBe (size Size))
    (Bswap (size Size))
  )
)

(type Size
  (enum
    (Word)
    (HalfWord)
    (Byte)
    (DoubleWord)
  )
)

(type JmpCond
  (enum
    (Eq)
    (Ne)
    (Lt)
    (Le)
    (Gt)
    (Ge)
    (Slt)
    (Sle)
    (Sgt)
    (Sge)
    (Set)
  )
)